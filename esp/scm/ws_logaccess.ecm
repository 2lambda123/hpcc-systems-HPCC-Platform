/*##############################################################################

    HPCC SYSTEMS software Copyright (C) 2021 HPCC SystemsÂ®.

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
############################################################################## */

ESPenum LogAccessType : int
{
    All(0, "All"),
    ByJobIdID(1, "ByJobIdID"),
    ByComponent(2, "ByComponent"),
    ByLogType(3, "ByLogType"),
    ByTargetAudience(4, "ByTargetAudience")
};

ESPenum LogAccessLogFormat : int
{
    XML(0, "XML"),
    JSON(1, "JSON"),
    CSV(2, "CSV")
} ;

ESPStruct TimeRange
{
    xsdDateTime StartDate; //example 1980-03-23T10:20:15
    xsdDateTime EndDate;   //example 1980-03-23T10:20:15
};

ESPRequest GetLogAccessInfoRequest
{
};

ESPResponse GetLogAccessInfoResponse
{
    string RemoteLogManagerType;
    string RemoteLogManagerConnectionString;
};
/*
* Provides mechanism to query log entries
*
* Caller can query by JobId, component, log event type, or target audience by providing the appropriate
* enumerated value in the LogCategory field, as well as the targeted value in the SearchByValue field.
*
* SearchbyValue is optional if LogCategory == ALL
*
* Caller should restrict the query to target a specific time range specified in the Range field.
* By default, the first 100 log entries encountered are returned. Caller to pagenize using the
* LogLineStartFrom field (specifies as zero-indexed start index) and the LogLineLimit (specifies the maximum
* number of log entries to be returned)
* Caller can specify which log columns should be reported via the Columns field, all available columns returned by default.
*
* The report format can be specified via the Format field: JSON|XML|CSV
*/
ESPRequest GetLogsRequest
{
    ESPenum LogAccessType LogCategory;
    string SearchByValue; //Value used to identify target log entries.
                          //Limited to values associated with the the LogCategory choice.
                          //
                          //If searching by "ByJobIdID", the SearchByValue should contain the jobid of interest
                          //If searching by "ByComponent", the SearchByValue should contain the component of interest
                          //If searching by "ByLogType", the SearchByValue should contain the 3 letter code associated with the log type of interest.
                          // valid values at time of writing are:
                          //    DIS - Disaster
                          //    ERR - Error
                          //    WRN - Warning
                          //    INF - Information
                          //    PRO - Progress
                          //    MET - Metric
                          //
                          //If searching by "ByTargetAudience", the SearchByValue should contain the 3 letter code associated with the target audience of interest.
                          // valid values at time of writing are:
                          //    OPR - Operator
                          //    USR - User
                          //    PRO - Programmer
                          //    ADT - Audit
    ESPStruct TimeRange Range;
    unsigned LogLineLimit(100);
    int64 LogLineStartFrom(0);
    ESParray<string> Columns;
    LogAccessLogFormat Format("JSON");
};

ESPResponse GetLogsResponse
{
    string LogLines;
};

ESPservice [auth_feature("WsLogAccess:READ"), version("1.0"), default_client_version("1.0"), exceptions_inline("xslt/exceptions.xslt")] ws_logaccess
{
    ESPmethod GetLogAccessInfo(GetLogAccessInfoRequest, GetLogAccessInfoResponse);
    ESPmethod GetLogs(GetLogsRequest, GetLogsResponse);
};

SCMexportdef(ws_logaccess);

SCMapi(ws_logaccess) IClientws_logaccess *createws_logaccessClient();

