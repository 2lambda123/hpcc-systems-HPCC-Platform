<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="CustomConfig">
  <title>Configurações Customizadas</title>

  <sect1 id="CustTechniques" role="nobrk">
    <title>Técnicas de Customização</title>

    <para>Nesta seção, nós vamos abordar a criação de uma configuração
    customizada do arquivo YAML e do lançamento de uma plataforma HPCC
    Systems<superscript>®</superscript> utilizando os configurações padrão mas
    as customizações. Depois de entender os conceitos de deste capítulo, você
    pode consultar o próximo para uma referência a todos as configurações de
    valores de configuração.</para>

    <para>Há várias maneiras de personalizar uma implantação da plataforma.
    Nós recomendamos o uso de métodos que permitem que você aproveite melhor o
    configuração como práticas de código (CaC). A configuração como código é a
    padrão de gerenciamento de arquivos de configuração em um sistema de
    controle de versão ou repositório.</para>

    <para>A seguir uma lista de técnicas de customização:</para>

    <itemizedlist>
      <listitem>
        <para>A primeira maneira de substituir uma configuração padrão é
        através da linha de comando usando o parâmetro <emphasis
        role="bold">--set</emphasis>.</para>

        <para>Este é o mais fácil, mas o menos compatível com as diretrizes
        CaC. Também é mais difícil de rastrear as alterações.</para>
      </listitem>

      <listitem>
        <para>A segunda maneira é modificando os valores padrão e salvando por
        meio da seguinte linha de comando:</para>

        <programlisting>helm show values hpcc/hpcc &gt; myvalues.yamlj</programlisting>

        <para>Isso pode estar em conformidade com as diretrizes do CaC, se
        você colocar esse arquivo sob controle de versão, mas dificulta a
        utilização de uma nova configuração padrão quando uma estiver
        disponível.</para>
      </listitem>

      <listitem>
        <para>A terceira maneira, é a que normalmente usamos. Usar o padrão
        configuração, mais um arquivo YAML de personalização e o parâmetro -f
        (ou parâmetro --values) para o comando helm. Isso usa o padrão
        configuração e apenas substitui as configurações especificadas no
        personalização YAML. Além disso, você pode passar vários arquivos YAML
        no mesmo comando, se desejado.</para>

        <para>Para este tutorial, usaremos o terceiro método para levantar um
        plataforma com todas as configurações padrão, mas adicionar algumas
        personalizações. No primeiro exemplo, em vez de um Roxie, teremos
        dois. No segundo exemplo, ele adicionará um segundo 10-way
        Thor.</para>
      </listitem>
    </itemizedlist>

    <sect2 id="CustTutorial1" role="brk">
      <title>Criar um Custom Configuration Chart para Dois Roxies</title>

      <orderedlist>
        <listitem>
          <para>Se você ainda não adicionou o repositório HPCC Systems a sua
          lista de repositórios do helm, adicione-o agora.</para>

          <para><programlisting>helm repo add hpcc https://hpcc-systems.github.io/helm-chart/</programlisting></para>

          <para>Se você já adiciou, atualize para os últimos charts:</para>

          <para><programlisting>helm repo update</programlisting></para>
        </listitem>

        <listitem>
          <para>Crie um novo arquivo de texto, o nomeie para <emphasis
          role="bold">tworoxies.yaml</emphasis> e abra-o em um editor de
          texto.</para>

          <para>Você pode usar qualquer editor de texto.</para>
        </listitem>

        <listitem>
          <para>Salve os valores padrão em um arquivo de texto:</para>

          <para><programlisting>helm show values hpcc/hpcc &gt; myvalues.yaml</programlisting></para>
        </listitem>

        <listitem>
          <para>Abra o arquivo salvo (myvalues.yaml) em um editor de
          texto.</para>
        </listitem>

        <listitem>
          <para>Copie toda seção <emphasis role="bold">roxie:</emphasis> e
          cole dentro no novo arquivo tworoxies.yaml.</para>
        </listitem>

        <listitem>
          <para>Copie todo o conteúdo do novo arquivo tworoxies.yaml, exceto a
          primeira linha (roxie:), e cole no final do arquivo.</para>
        </listitem>

        <listitem>
          <para>No primeiro bloco, edite o valor para <emphasis
          role="bold">name:</emphasis> e altere o valor para <emphasis
          role="bold">roxie2.</emphasis></para>
        </listitem>

        <listitem>
          <para>No segundo bloco, edite o valor para <emphasis
          role="bold">prefix:</emphasis> e altere para <emphasis
          role="bold">roxie2.</emphasis></para>
        </listitem>

        <listitem>
          <para>No segundo bloco, edite o valor para <emphasis
          role="bold">name:</emphasis> abaixo de <emphasis
          role="bold">services:</emphasis> e altere para <emphasis
          role="bold">roxie2</emphasis>.</para>
        </listitem>

        <listitem>
          <para>Salve o arquivo e feche o editor de texto.</para>

          <para>O arquivo tworoxies.yaml file deve se parecer com este
          aqui:</para>

          <para><emphasis role="bold">Observação:</emphasis> Os comentários
          foram removidos para simplificar o examplo:</para>

          <para><programlisting>roxie:
- name: roxie
  disabled: false
  prefix: roxie
  services:
  - name: roxie
    servicePort: 9876
    listenQueue: 200
    numThreads: 30
    visibility: local
  replicas: 2  
  numChannels: 2
  serverReplicas: 0
  localAgent: false
  traceLevel: 1
  topoServer:
    replicas: 1

- name: roxie2
  disabled: false
  prefix: roxie2
  services:
  - name: roxie2
    servicePort: 9876
    listenQueue: 200
    numThreads: 30
    visibility: local
  replicas: 2  
  numChannels: 2
  serverReplicas: 0
  localAgent: false
  traceLevel: 1
  topoServer:
    replicas: 1
</programlisting></para>
        </listitem>
      </orderedlist>

      <para><emphasis role="bold">Deploy utilizando um novo chart de
      configuração personalizado.</emphasis></para>

      <orderedlist>
        <listitem>
          <para>Abra uma janela de terminal e navegue para o diretório onde
          você salvou o arquivo tworoxies.yaml.</para>
        </listitem>

        <listitem>
          <para>Faça o deploy do seu HPCC Systems Platform, adicionando a nova
          configuração ao comando:</para>

          <para><programlisting>helm install mycluster hpcc/hpcc -f tworoxies.yaml</programlisting></para>
        </listitem>

        <listitem>
          <para>Após você confirmar que seu deploy está sendo executado, abra
          o ECL Watch.</para>

          <para>Você deverá ver dois clusters Roxie disponíveis como Targets
          -- roxie e roxie2.</para>
        </listitem>
      </orderedlist>
    </sect2>

    <sect2 id="CustTutorial2" role="nobrk">
      <title>Crie um Novo Chart de Configuração para Dois Thors</title>

      <para>Você pode especificar mais de uma configuração de customização
      repetindo o parâmetro -f.</para>

      <para>Por exemplo:</para>

      <para><programlisting>helm install mycluster hpcc/hpcc  -f tworoxies.yaml -f twothors.yaml</programlisting></para>

      <para>Nesta seção, nós vamos adicionar um segundo Thor 10-way.</para>

      <orderedlist>
        <listitem>
          <para>Se você ainda não adicionou o repositório do HPCC Systems a
          lista de repositórios helm, adicione agora.<programlisting>helm repo add hpcc https://hpcc-systems.github.io/helm-chart/</programlisting></para>

          <para>Se você já adicionou, atualize os últimos charts:</para>

          <para><programlisting>helm repo update</programlisting></para>
        </listitem>

        <listitem>
          <para>Crie um novo arquivo de texto e nomeie-o <emphasis
          role="bold">twothors.yaml</emphasis>, em seguida abra em um editor
          de texto.</para>

          <para>Você pode usar qualquer editor de texto.</para>
        </listitem>

        <listitem>
          <para>Em um editor de texto, abra o arquivo de valores padrão que
          você salvou anteriormente (myvalues.yaml).</para>
        </listitem>

        <listitem>
          <para>Copie por inteiro a seção <emphasis
          role="bold">thor:</emphasis> e cole no novo arquivo
          twothors.yaml.</para>
        </listitem>

        <listitem>
          <para>Copie todo conteúdo para o novo arquivo twothors.yaml, exceto
          a primeira linha (thor:), e cole no final do arquivo.</para>
        </listitem>

        <listitem>
          <para>No segundo bloco, edite o valor para <emphasis
          role="bold">name:</emphasis> e altere-o para <emphasis
          role="bold">thor10.</emphasis></para>
        </listitem>

        <listitem>
          <para>No segundo bloco, edite o valor para <emphasis
          role="bold">prefix:</emphasis> e altere-o para <emphasis
          role="bold">thor10.</emphasis></para>
        </listitem>

        <listitem>
          <para>No segundo bloco, edite o valor para <emphasis
          role="bold">numWorkers:</emphasis> e altere-o para <emphasis
          role="bold">10.</emphasis></para>
        </listitem>

        <listitem>
          <para>Salve o arquivo e feche o editor de texto.</para>

          <para>O resultado do arquivo do twothors.yaml deve se parecer
          assim</para>

          <para><emphasis role="bold">Nota:</emphasis> Os comentários foram
          removidos para simplificar o exemplo:</para>

          <para><programlisting>thor:
- name: thor
  prefix: thor
  numWorkers: 2
  maxJobs: 4
  maxGraphs: 2
- name: thor10
  prefix: thor10
  numWorkers: 10
  maxJobs: 4
  maxGraphs: 2</programlisting></para>
        </listitem>
      </orderedlist>

      <para><emphasis role="bold">Deploy utilizando o novo chart de
      configuração personalizado.</emphasis></para>

      <orderedlist>
        <listitem>
          <para>Abra uma janela de terminal e navegue para o diretório onde
          você salvou o arquivo twothors.yaml.</para>
        </listitem>

        <listitem>
          <para>Faça o deploy do seu HPCC Systems Platform, adicionando a nova
          configuração ao comando:</para>

          <para><programlisting># If you have previously stopped your cluster

helm install mycluster hpcc/hpcc -f tworoxies.yaml -f twothors.yaml

# To upgrade without stopping

helm upgrade mycluster hpcc/hpcc -f tworoxies.yaml -f twothors.yaml
</programlisting></para>
        </listitem>

        <listitem>
          <para>Após você confirmar que seu deploy está sendo executado, abra
          o ECL Watch.</para>

          <para>Você deverá ver dois clusters Thor disponíveis como Targets --
          thor and thor10.</para>
        </listitem>
      </orderedlist>
    </sect2>
  </sect1>

  <sect1 id="CostTracking1">
    <title>Rastreamento de Custos de Contêineres</title>

    <para>Com o advento da plataforma de sistemas HPCC em contêineres,
    introduzimos informações de rastreamento de custos. Isso é particularmente
    útil ao usar instâncias de plataforma HPCC Systems nativas da nuvem em uma
    configuração de nuvem em que algum planejamento e configuração podem
    ajudar a reduzir as despesas.</para>

    <para>Duas novas colunas foram adicionadas à página de workunits no ECL
    Watch. As colunas podem ser classificadas por qualquer coluna de custo,
    assim como as outras colunas no ECL Watch, clicando no topo da
    coluna.</para>

    <sect2 id="TypesOfCosts">
      <title>Tipos de custos</title>

      <para>Existem três tipos de custos que são rastreados.</para>

      <para><itemizedlist>
          <listitem>
            <para>Custos de Execução</para>
          </listitem>

          <listitem>
            <para>Custos de Armazenamento</para>
          </listitem>

          <listitem>
            <para>Custo de Acesso a Arquivo</para>
          </listitem>
        </itemizedlist></para>

      <variablelist>
        <varlistentry>
          <term>OBSERVAÇÃO:</term>

          <listitem>
            <para>Todos os valores de custo calculados e exibidos são
            aproximados. Existem muitas variáveis que podem resultar em
            imprecisões. Esses valores de custo devem ser usados apenas como
            um guia.</para>
          </listitem>
        </varlistentry>
      </variablelist>

      <sect3 id="ExecutionCost">
        <title>Custos de Execução</title>

        <para>Custo de execução é o valor referente a custo de execução da
        workunit, do graph e subgraphs no cluster Thor. Inclui o custo de
        todos os nós diretamente necessários para executar o trabalho e inclui
        o custo de:</para>

        <para><itemizedlist>
            <listitem>
              <para>Nós do executor</para>
            </listitem>

            <listitem>
              <para>Nós do Compilador</para>
            </listitem>

            <listitem>
              <para>Nós do agente e do gereciador</para>
            </listitem>
          </itemizedlist></para>

        <para>O valor do custo de execução de uma workunit é exibido no ECL
        Watch em sua página de resumo e é organizado em grap, subgraph e nível
        de atividade. Os valores de custo do graphh e do subgraph estão
        disponíveis no visualizador de métricas e graph.</para>

        <para><variablelist>
            <varlistentry>
              <term>Observação:</term>

              <listitem>
                <para>O custo de execução das workunits ROXIE não está
                implementado atualmente.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <sect4 id="JobGuillotine">
          <title>Job Guilhotina</title>

          <para>O de risco de custos descontrolados é uma preocupação para
          cobrança baseada em uso potencialmente ilimitada. Assim, o recurso
          job guilhotina é fornecido para gerenciar esse cenário, limitando os
          custos por meio dos valores limite e do limite rígido. Quando o
          custo de um job atinge um valor definido, ele pode ser encerrado,
          controlando os custos que podem incorrer.</para>

          <variablelist>
            <varlistentry>
              <term>Observação:</term>

              <listitem>
                <para>Esta funcionalidade atualmente é suportada somente para
                os jobs do Thor.</para>
              </listitem>
            </varlistentry>
          </variablelist>

          <graphic fileref="../../images/SCOST_img3_1.jpg"><!--ADD-IMAGE--></graphic>
        </sect4>
      </sect3>

      <sect3 id="StorageCOsts">
        <title>Custo de armazenamento</title>

        <para>Esse é o custo de hospedar os dados no plano de armazenamento.
        Não inclui os custos das operações de dados, como custos de leitura ou
        gravação.</para>

        <para><variablelist>
            <varlistentry>
              <term>Observação:</term>

              <listitem>
                <para>Os custos não são registrados para arquivos temporários
                ou de derramamento, porque o armazenamento local está incluído
                no preço da VM usada para calcular os custos de
                execução.</para>
              </listitem>
            </varlistentry>
          </variablelist></para>

        <para>Os custos de armazenamento não podem ser vistos como um valor
        separado no ECL Watch. Eles só podem ser visualizados como parte de um
        campo de custo na página de resumo de um arquivo lógico. </para>
      </sect3>

      <sect3 id="FileAccessCosts">
        <title>Custo de acesso aos arquivos</title>

        <para>Os custos de leitura e gravação em arquivos são referidos como
        custos de acesso a arquivos. Vários planos de armazenamento cobram por
        operações de dados separadamente. O valor do custo de acesso ao
        arquivo incluirá o custo de leitura e gravação. Neste momento,
        quaisquer outros custos relacionados com ações de arquivo (como
        excluir ou copiar) não serão registrados ou incluídos como parte dos
        custos.</para>

        <para>Na página de resumo Logical File no ECL Watch, o custo de acesso
        ao arquivo aparece como parte do campo de custo.</para>

        <para>As despesas de uma workunit para acessar arquivos lógicos também
        são incluídas nas estatísticas e atributos da workunit. O custo de
        leitura/gravação é relatado no registro da atividade e somado nos
        níveis de graph, subgraph e escopo do fluxo de trabalho.</para>

        <para>O custo geral de acesso a arquivos para uma workunit é rastreado
        e relatado na página de resumo.</para>

        <para>Na página de resumo Logical File, você pode ver o novo campo de
        custo. É o custo total de armazenamento e acesso aos dados.
        Atualmente, as informações de custo são geradas apenas para jobs Thor
        e hThor.</para>
      </sect3>
    </sect2>

    <sect2 id="CostsConfigurations">
      <title>Custo de Configuração</title>

      <para>Esta seção detalha a configuração dos parâmetros de configuração
      dos jobst. A configuração dos custos do jobs trabalho em uma instância
      HPCC Systems sistemas HPCC nativos da nuvem é feita usando o chart helm.
      Por padrão, o arquivo <emphasis>values.yaml</emphasis> fornecido contém
      uma seção para configurar custos.</para>

      <para>Por exemplo:</para>

      <orderedlist>
        <listitem>
          <para>Crie um novo arquivo de texto e o nomeie <emphasis
          role="bold">mycosts.yaml</emphasis> e abra em um editor de
          texto.</para>

          <para>Você pode usar um editor de texto.</para>
        </listitem>

        <listitem>
          <para>Salve os valores padrão em um arquivo de texto:</para>

          <para><programlisting>helm show values hpcc/hpcc &gt; myvalues.yaml</programlisting></para>
        </listitem>

        <listitem>
          <para>Abra o arquivo salvo (myvalues.yaml) em um editor de
          texto.</para>
        </listitem>

        <listitem>
          <para>Copie a sessão <emphasis role="bold">cost:</emphasis> e cole
          em outro novo arquivo mycosts.yaml.</para>
        </listitem>

        <listitem>
          <para>Altere quaisquer valores relacionados a custos desejados,
          conforme apropriado.</para>
        </listitem>

        <listitem>
          <para>Salve o arquivo e feche o editor de texto.</para>
        </listitem>

        <listitem>
          <para>Implante sua plataforma HPCC Systems, adicionando a nova
          configuração ao seu comando:</para>

          <para><programlisting>helm install mycluster hpcc/hpcc -f mycosts.yaml</programlisting></para>
        </listitem>
      </orderedlist>

      <para>Os valores de configuração fornecem as informações de preços e
      informações de formatação de moeda. Os seguintes parâmetros de
      configuração de custo são suportados:The configuration values provide
      the pricing information and currency formatting information. The
      following cost configuration parameters are supported:</para>

      <para><informaltable colsep="1" frame="all" rowsep="1">
          <tgroup cols="2">
            <colspec align="left" colwidth="122.40pt"/>

            <colspec/>

            <tbody>
              <row>
                <entry><emphasis>currencyCode</emphasis></entry>

                <entry>Usado para formatação de moeda de valores de
                custo.</entry>
              </row>

              <row>
                <entry><emphasis>perCpu</emphasis></entry>

                <entry>Custo por hora de uma única CPU.</entry>
              </row>

              <row>
                <entry><emphasis>storageAtRest</emphasis></entry>

                <entry>Custo de armazenamento por gigabyte por mês.</entry>
              </row>

              <row>
                <entry><emphasis>storageReads</emphasis></entry>

                <entry>Custo por 10.000 operações de leitura.</entry>
              </row>

              <row>
                <entry><emphasis>storageWrites</emphasis></entry>

                <entry>Custo por 10.000 operações de gravação.</entry>
              </row>
            </tbody>
          </tgroup>
        </informaltable></para>

      <sect3 id="ConfiguringCloudCosts">
        <title>Configurando custos da Nuvem</title>

        <para>O arquivo de configuração <emphasis>values.yaml</emphasis>
        padrão é configurado com os seguintes parâmetros de custo na seção
        global/cost:</para>

        <programlisting>  cost:
    currencyCode: USD
    perCpu: 0.126
    storageAtRest: 0.0135
    storageReads: 0.0485
    storageWrites: 0.0038
</programlisting>

        <para>O atributo <emphasis role="bold">currencyCode</emphasis> deve
        ser configurado com o código de país ISO 4217. (O padrão da plataforma
        HPCC Systems é USD se o código da moeda estiver faltando).</para>

        <para>O <emphasis role="bold">perCpu</emphasis> da seção global/cost
        se aplica a todos os componentes que não foram configurados com seu
        próprio valor perCpu.</para>

        <para>Um valor perCpu específico para um componente pode ser definido
        adicionando um atributo cost/perCPU na seção desse componente.</para>

        <para>Para componentes Dali:</para>

        <programlisting>  dali:
    - name: mydali
      <emphasis role="bold">cost:
        perCpu: </emphasis>0.24</programlisting>
      </sect3>

      <sect3 id="ThorCostsConfiguration">
        <title>Configuração dos Custos do Thor</title>

        <para>Os componentes Thor suportam parâmetros de custo adicionais que
        são usados para o recurso de "guilhotina" de trabalho:</para>

        <para><informaltable colsep="1" frame="all" rowsep="1">
            <tgroup cols="2">
              <colspec align="left" colwidth="122.40pt"/>

              <colspec/>

              <tbody>
                <row>
                  <entry><emphasis>limit </emphasis></entry>

                  <entry>Define o limite de custo “flexível” que uma unidade
                  de trabalho pode incorrer. O limite é “suave” no sentido de
                  que pode ser substituído pela opção do ECL <emphasis
                  role="bold">maxCost</emphasis>. Um nó será encerrado se
                  exceder seu <emphasis role="bold">maxCost</emphasis> (se
                  definido) ou o valor do atributo limite (se o <emphasis
                  role="bold">maxCost</emphasis> não for definido).</entry>
                </row>

                <row>
                  <entry><emphasis>hardlimit</emphasis></entry>

                  <entry>Define o limite de custo máximo absoluto, um limite
                  que não pode ser substituído pela configuração da opção ECL.
                  O valor <emphasis role="bold">maxCost</emphasis> que exceder
                  o hardlimit será ignorado.</entry>
                </row>
              </tbody>
            </tgroup>
          </informaltable></para>

        <para>O exemplo a seguir define os limites de custo dos trabalhos,
        adicionando os atributos à seção Thor do yaml de configuração.</para>

        <programlisting>thor:
- name: thor
  prefix: thor
  numWorkers: 2
  maxJobs: 4
  maxGraphs: 2
  <emphasis role="bold">cost:
    limit: 10.00   </emphasis>   # maximum cost is $10, overridable with maxCost option
    <emphasis role="bold">hardlimit: 20.00</emphasis>  # maximum cost is $20, cannot be overridden</programlisting>
      </sect3>

      <sect3 id="StorageCostParameters">
        <title>Parâmetros dos Custos de Armazenamentos</title>

        <para>Os parâmetros de custos de armazenamentos (<emphasis
        role="bold">storageAtRest</emphasis>, <emphasis
        role="bold">storageReads</emphasis> e <emphasis
        role="bold">storageWrites</emphasis>) podem ser adicionados na seção
        de custo do plano de armazenamento para definir parâmetros de custo
        específicos para o plano de armazenamento.</para>

        <para>Por exemplo:</para>

        <programlisting>storage:
  planes:
  - name: dali
    storageClass: ""
    storageSize: 1Gi
    prefix: "/var/lib/HPCCSystems/dalistorage"
    pvc: mycluster-hpcc-dalistorage-pvc
    category: dali
    <emphasis role="bold">cost:
      storageAtRest:</emphasis> 0.01
      <emphasis role="bold">storageReads:</emphasis> 0.001
      <emphasis role="bold">storageWrites:</emphasis> 0.04
</programlisting>

        <para>Os parâmetros de custo de armazenamento na seção global são
        usados apenas se nenhum parâmetro de custo for especificado no plano
        de armazenamento.</para>
      </sect3>
    </sect2>
  </sect1>
</chapter>
